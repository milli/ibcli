DVS info
CVS : /export/CVS_Repository/infoblox/src/ibcli
SVN : file:///export/SVN_Repository/src/ibcli/head

missing features :

[x] UTF-8 support
    [-] test on non-utf8 systems ?
    [x] use Encode ;
    [x] $ext_attribute{$name} = encode ("utf8",$cvalue);
    [x] move this check to do_Func()
    [x] also move decode_comment()

[ ] conf zone "" insert host (add then modify)
    [ ] does the parser support '*' in the command hash...
[ ] conf zone "" update host (modify then add)

[ ] Network Views
    [ ] report the view name
    [ ] show the name in a list of networks

[ ] modify network searches with network views
    [ ] test if the 'search' returns more than 1 network.

[ ] EA for networks and other objects
    [ ] add EA as a subroutine
        [ ] check the args in the commandline
        [ ] pass the object to the sub
        [ ] add ipam if there are args in the line

[ ] next_available N addresses
    [ ] cleanup next-available code

[ ] conf net mod xxx insert_option foo=bar
    [ ] add/remove an option from the custom list
    [ ] are there other arrays we need to support ?

[ ] re-parent networks
    [ ] move the child networks to a different view for short term

[ ] create a network_container in 1 step
    [ ] call add, then split

[ ] add a reservation :
    [ ] to a HOST
    [ ] to a network

    $fixed->match_client( )

    conf net add reserved 1.2.3.4
    conf net add fixed 1.2.3.4 <Client_id>

[ ] Creating a network template in a scripted manner

-----------

[x] show/delete shared networks

[x] TTL for A/PTR/CNAME

[x] modify a fixed address

[x] move network
    conf net move xxx member=<yyy>|failover=<name>
    - unset the range membership
    - remove

[x] cli v1.2

    [x] read config files
        [x] don't sput prompts
        [x] die on errors ?
        [x] -f config 

    [x] connect on commandline :
        [x] -s <system>
        [x] -p password
        [x] -d <debug>
        [x] -V (get version)

    [x] show version

    [x] verify all scripting commands are accessable

    [x] show a '*' for pending comitts

    [x] set a value = 'configure xxx'
        [x] set zone add foo.com
        [x] set zone add foo.com auth
        [x] set zone delete foo.com
        [-] set zone foo.com add nameserver 1.2.3.4
        [x] set zone foo.com add host 1.2.3.4
        [x] set zone foo.com add bulkhost 1.2.3.4
        [x] set zone foo.com add cname 1.2.3.4
        [x] set zone foo.com delete host 1.2.3.4
        [x] set zone foo.com delete bulkhost 1.2.3.4
        [x] set zone foo.com delete cname 1.2.3.4

        [x] set network add 1.2.3.4/16
        [x] set network delete 1.2.3.4/16
        ---
        [x] set network 1.2.3.4 add network 1.2.3.4/nn
        [x] set network 1.2.3.4 add address 1.2.3.4 test.foo.com
        [x] set network 1.2.3.4 del address 1.2.3.4
        [x] set network 1.2.3.4 split /24
        [x] set network 1.2.3.4 split /24 all
        [x] set network 1.2.3.4 split /24 required

    [x] get a value = 'show xxx'

    [x] to get values, don't interrogate the database, just do a AXFR
        using dig. this will let you know what is current and what needs
        to be comitted. 
        [x] A GET will only get anything comitted.
            get zone
            get zone MX
            get zone NS
            get zone detailed

        [x] get host
            dig +opts @server <host> A

        [-] get blah [verbose]
            dig +multiline +nostat +nocmd \
                @<server> <zone> <type>
        [x] terse mode
            dig +noquestion +noauthority +noadditional +nocomments \
                +multiline +nostat +nocmd \
                @<server> <zone> <type>

        [x] DON'T do recursive digs (+norecurse)

        [x] need to prettyprint an AXFR
            [x] get zone all
            [x] get zone soa
            [x] get zone mx
            [x] get network 1.2.3.4/cidr 
        [-] get dig to to an 'LS' of the zone files
            [-] Can't dp it.
            
    [x] set system default
        (ib_erase_dns_data)

[x] cli v1.8

    [x] un hardcode 'dig' (use 'dig' not '/usr/bin/dig')

    [x] conf server <ip> <password>
        [x] if not specified, blank is ok
            [x] need to undef the password...
        [x] still use 'conf server pass <passwd> to
            explicitly set the password
        When connected to a DNS One, and then you disconnect, and then connect
        to a non-DNS One, the ibcli craps out as it can't connect. When
        you disc from one DNS One, and connect to another with a
        different scripting password, you also have issues.

    [x] more commands

        [x] download logs
            ib_export_logs

        [x] conf zone <zone> import <ipaddress> noptr
            ib_import_zone( zone , IP , true | false )
            if set to true noptr applies (default is false)

        [x] set zone add foo.com delegated svr IP svr IP ...
        [x] set zone add foo.com auth dns_server blah.com dns_server foo.com 
            add a server with additional NS records

        [x] conf dhcp 1.2.3.4/16 add range <startip> <endip>
            [x] conf network 1.2.3.4/16 add dhcprange <startip> <endip>
        [x] conf dhcp 1.2.3.4/16 del range <startip> <endip>

        [x] conf dhcp 1.2.3.4/16 add address <ip> <MAC> <options>
        [x] conf dhcp 1.2.3.4/16 del fixed <ip>

        [x] conf dhcp 1.2.3.4/16 modify options <options>

        [x] conf network global <option> <value>
            ib_modify_global_dhcp_options(
              "dhcp_class",  "remote_class3", "true", "ccc", "true", "ddd"
            );

            if you don't want to define remote id, then is should be:
            ib_modify_global_dhcp_options(
              "dhcp_class",  "remote_class3", "true", "ccc", "false"
            );

    [-] push all the GOOD commands into a stack
        [-] create a -q (queue) option that just adds to the stack
            USE this for the shell based CLI version
            [-] stack to a $HOME/.ibcli_stack
                [-] prepend the IP address of the server for sanity
                [-] if there is stack, show a '*'
            [-] changing servers will dump the stack
        [-] 'commit' processes the stack (and dumps it)


    [x] perldoc this crap

    [x] Data::Dumper

    [ ] Stack control ?
        [ ] show stack 
            displays the pending commits

        [ ] conf stack del <num> 
            delete a stack item

[ ] cli v2.2

    [ ] more commands

        [ ] set system import <directory>

[ ] Grid commands

    [ ] enable dns|dhcp|ldap|radius
    [ ] disable ...

    [x] help
        syntax should always be 'help <command>'
        not '<command> help'

    [x] show network
    [x] show security
    [x] show password_hint

    [x] reboot
    [x] shutdown

CLI commands

    [x] set system default
        reset to factory defaults

    [x] ping (-n)

    [x] traceroute (-n)

    [x] show cpu <interval> <count>
        calls : system("vmsat x y");
        
    [x] show interface eth0
        calls : system("ifconfig eth0");
    [x] show interface all
        calls : system("ifconfig -a");

    [x] configure interface eth0 speed auto duplex none
        Set port and speed

    [x] show connections
        calls : system("netstat --inet");
    [x] show connections numerical
        calls : system("netstat -n --inet");

    [x] show disk
        pump 'df' through a grep to clean stuff

    [x] show diagnostics
        gets version info
        gets interface info
        gets vmstat info
        gets whatever else we need

    [x] show counters
        show counters <param>
        conf counters reset

    [x] Show arp

